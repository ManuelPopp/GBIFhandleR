#' @param remove_invalid Logical. If `TRUE`, removes invalid geographic coordinates. Default is `TRUE`.
#' @param remove_hotspots Logical. If `TRUE`, removes records associated with biodiversity hotspots such as airports or harbors. Default is `TRUE`.
#' @param remove_outliers Logical. If `TRUE`, removes spatial outliers based on the species' distribution. Default is `TRUE`.
#' @param remove_sea Logical. If `TRUE`, removes records located in the sea. Default is `TRUE`.
#' @param remove_urban Logical. If `TRUE`, removes records located in urban areas. Default is `TRUE`.
#' @param remove_zero Logical. If `TRUE`, removes records with zero latitude or longitude. Default is `TRUE`.
#' @param outlier_settings A list of additional settings for outlier detection, passed to `CoordinateCleaner::cc_outl`.
#' @param round_settings A list of additional settings. If not `NULL`, these settings are passed to `CoordinateCleaner::cd_round`.
#'   Default is `NULL`, which uses standard parameters (`tdi = 1000`, `method = "distance"`, `min_occs = 4`).
#'
#' @return A cleaned data frame with problematic records removed based on the specified criteria.
#'
#' @details
#' - This function sequentially applies a series of cleaning functions from the `CoordinateCleaner` package.
#' - Each cleaning step can be enabled or disabled using its corresponding parameter.
#' - Outlier detection (`cc_outl`) uses customizable parameters via the `outlier_settings` argument.
#' - Records with `individualCount == 0` or `occurrenceStatus == "ABSENT"` are also removed.
#'
#' @examples
#' # Example: Clean a dataset of species observations
#' # observations <- get_observations("Tragopogon dubius")
#' clean_data <- clean_coords(
#'   x = observations$data,
#'   species_column = "species_name",
#'   remove_outliers = TRUE,
#'   remove_sea = FALSE
#' )
#'
#' # Example: Customize outlier detection settings
#' clean_data <- clean_coords(
#'   x = observations,
#'   outlier_settings = list(tdi = 500, method = "quantile")
#' )
#'
#' @import CoordinateCleaner
#' @export
clean_coords <- function(
x,
species_column = "scientificName",
remove_capitals = TRUE,
remove_centroids = TRUE,
remove_duplicates = TRUE,
remove_gbif = TRUE,
remove_institutions = TRUE,
remove_invalid = TRUE,
remove_hotspots = TRUE,
remove_outliers = TRUE,
remove_sea = TRUE,
remove_urban = TRUE,
remove_zero = TRUE,
outlier_settings = NULL,
round_settings = NULL
) {
if (remove_capitals) {
x <- CoordinateCleaner::cc_cap(x, species = species_column)
}
if (remove_centroids) {
x <- CoordinateCleaner::cc_cen(x, species = species_column)
}
if (remove_duplicates) {
x <- CoordinateCleaner::cc_dupl(x, species = species_column)
}
if (remove_gbif) {
x <- CoordinateCleaner::cc_gbif(x, species = species_column)
}
if (remove_hotspots) {
x <- CoordinateCleaner::cc_aohi(x, species = species_column)
}
if (remove_institutions) {
x <- CoordinateCleaner::cc_inst(x, species = species_column)
}
if (remove_invalid) {
x <- CoordinateCleaner::cc_val(x)
}
# Remove outliers
outlier_args <- list(
x = x,
species = species_column,
tdi = 1000,
method = "distance",
min_occs = 4
)
if (!is.null(outlier_settings)) {
outlier_args <- utils::modifyList(outlier_args, outlier_settings)
}
if (remove_outliers) {
x <- do.call(CoordinateCleaner::cc_outl, outlier_args)
}
# Remove raster centroids
if (!is.null(round_settings)) {
x <- do.call(CoordinateCleaner::cd_round, round_settings)
}
if (remove_sea) {
x <- CoordinateCleaner::cc_sea(x, species = species_column)
}
if (remove_urban) {
x <- CoordinateCleaner::cc_urb(x, species = species_column)
}
if (remove_zero) {
x <- CoordinateCleaner::cc_zero(x, species = species_column)
}
# Remove absences
absences <- which(x$individualCount == 0 | x$occurrenceStatus == "ABSENT")
if (length(absences) >= 1) {
x <- x[-absences,]
}
return(x)
}
clean_data <- clean_coords(
x = observations,
species_column = "scientificName",
remove_outliers = TRUE,
remove_sea = FALSE
)
#' Clean geographic coordinates in a data frame
#'
#' This function uses the `CoordinateCleaner` package to clean and filter geographic coordinates
#' in a data frame, removing problematic records such as duplicates, outliers, invalid points,
#' and points located in capitals, centroids, or urban areas.
#'
#' @param x A data frame containing geographic data, including coordinates and species information.
#' @param species_column A character string specifying the name of the column containing species names. Default is `"species"`.
#' @param remove_capitals Logical. If `TRUE`, removes records located in capital cities. Default is `TRUE`.
#' @param remove_centroids Logical. If `TRUE`, removes records located in country centroids. Default is `TRUE`.
#' @param remove_duplicates Logical. If `TRUE`, removes duplicate records for the same species. Default is `TRUE`.
#' @param remove_gbif Logical. If `TRUE`, removes records associated with the GBIF headquarters. Default is `TRUE`.
#' @param remove_institutions Logical. If `TRUE`, removes records associated with institutions (e.g., herbaria). Default is `TRUE`.
#' @param remove_invalid Logical. If `TRUE`, removes invalid geographic coordinates. Default is `TRUE`.
#' @param remove_hotspots Logical. If `TRUE`, removes records associated with biodiversity hotspots such as airports or harbors. Default is `TRUE`.
#' @param remove_outliers Logical. If `TRUE`, removes spatial outliers based on the species' distribution. Default is `TRUE`.
#' @param remove_sea Logical. If `TRUE`, removes records located in the sea. Default is `TRUE`.
#' @param remove_urban Logical. If `TRUE`, removes records located in urban areas. Default is `TRUE`.
#' @param remove_zero Logical. If `TRUE`, removes records with zero latitude or longitude. Default is `TRUE`.
#' @param outlier_settings A list of additional settings for outlier detection, passed to `CoordinateCleaner::cc_outl`.
#' @param round_settings A list of additional settings. If not `NULL`, these settings are passed to `CoordinateCleaner::cd_round`.
#'   Default is `NULL`, which uses standard parameters (`tdi = 1000`, `method = "distance"`, `min_occs = 4`).
#'
#' @return A cleaned data frame with problematic records removed based on the specified criteria.
#'
#' @details
#' - This function sequentially applies a series of cleaning functions from the `CoordinateCleaner` package.
#' - Each cleaning step can be enabled or disabled using its corresponding parameter.
#' - Outlier detection (`cc_outl`) uses customizable parameters via the `outlier_settings` argument.
#' - Records with `individualCount == 0` or `occurrenceStatus == "ABSENT"` are also removed.
#'
#' @examples
#' # Example: Clean a dataset of species observations
#' # observations <- get_observations("Tragopogon dubius")
#' clean_data <- clean_coords(
#'   x = observations$data,
#'   species_column = "species_name",
#'   remove_outliers = TRUE,
#'   remove_sea = FALSE
#' )
#'
#' # Example: Customize outlier detection settings
#' clean_data <- clean_coords(
#'   x = observations,
#'   outlier_settings = list(tdi = 500, method = "quantile")
#' )
#'
#' @import CoordinateCleaner
#' @export
clean_coords <- function(
x,
species_column = "scientificName",
remove_capitals = TRUE,
remove_centroids = TRUE,
remove_duplicates = TRUE,
remove_gbif = TRUE,
remove_institutions = TRUE,
remove_invalid = TRUE,
remove_hotspots = TRUE,
remove_outliers = TRUE,
remove_sea = TRUE,
remove_urban = TRUE,
remove_zero = TRUE,
outlier_settings = NULL,
round_settings = NULL
) {
if (remove_capitals) {
x <- CoordinateCleaner::cc_cap(x, species = species_column)
}
if (remove_centroids) {
x <- CoordinateCleaner::cc_cen(x, species = species_column)
}
if (remove_duplicates) {
x <- CoordinateCleaner::cc_dupl(x, species = species_column)
}
if (remove_gbif) {
x <- CoordinateCleaner::cc_gbif(x, species = species_column)
}
if (remove_hotspots) {
x <- CoordinateCleaner::cc_aohi(x, species = species_column)
}
if (remove_institutions) {
x <- CoordinateCleaner::cc_inst(x, species = species_column)
}
if (remove_invalid) {
x <- CoordinateCleaner::cc_val(x)
}
# Remove outliers
outlier_args <- list(
x = x,
species = species_column,
tdi = 1000,
method = "distance",
min_occs = 4
)
if (!is.null(outlier_settings)) {
outlier_args <- utils::modifyList(outlier_args, outlier_settings)
}
if (remove_outliers) {
x <- do.call(CoordinateCleaner::cc_outl, outlier_args)
}
# Remove raster centroids
if (!is.null(round_settings)) {
x <- do.call(CoordinateCleaner::cd_round, round_settings)
}
if (remove_sea) {
x <- CoordinateCleaner::cc_sea(x, species = species_column)
}
if (remove_urban) {
x <- CoordinateCleaner::cc_urb(x)
}
if (remove_zero) {
x <- CoordinateCleaner::cc_zero(x, species = species_column)
}
# Remove absences
absences <- which(x$individualCount == 0 | x$occurrenceStatus == "ABSENT")
if (length(absences) >= 1) {
x <- x[-absences,]
}
return(x)
}
clean_data <- clean_coords(
x = observations,
species_column = "scientificName",
remove_outliers = TRUE,
remove_sea = FALSE
)
observations
#' Clean geographic coordinates in a data frame
#'
#' This function uses the `CoordinateCleaner` package to clean and filter geographic coordinates
#' in a data frame, removing problematic records such as duplicates, outliers, invalid points,
#' and points located in capitals, centroids, or urban areas.
#'
#' @param x A data frame containing geographic data, including coordinates and species information.
#' @param species_column A character string specifying the name of the column containing species names. Default is `"species"`.
#' @param remove_capitals Logical. If `TRUE`, removes records located in capital cities. Default is `TRUE`.
#' @param remove_centroids Logical. If `TRUE`, removes records located in country centroids. Default is `TRUE`.
#' @param remove_duplicates Logical. If `TRUE`, removes duplicate records for the same species. Default is `TRUE`.
#' @param remove_gbif Logical. If `TRUE`, removes records associated with the GBIF headquarters. Default is `TRUE`.
#' @param remove_institutions Logical. If `TRUE`, removes records associated with institutions (e.g., herbaria). Default is `TRUE`.
#' @param remove_invalid Logical. If `TRUE`, removes invalid geographic coordinates. Default is `TRUE`.
#' @param remove_hotspots Logical. If `TRUE`, removes records associated with biodiversity hotspots such as airports or harbors. Default is `TRUE`.
#' @param remove_outliers Logical. If `TRUE`, removes spatial outliers based on the species' distribution. Default is `TRUE`.
#' @param remove_sea Logical. If `TRUE`, removes records located in the sea. Default is `TRUE`.
#' @param remove_urban Logical. If `TRUE`, removes records located in urban areas. Default is `TRUE`.
#' @param remove_zero Logical. If `TRUE`, removes records with zero latitude or longitude. Default is `TRUE`.
#' @param outlier_settings A list of additional settings for outlier detection, passed to `CoordinateCleaner::cc_outl`.
#' @param round_settings A list of additional settings. If not `NULL`, these settings are passed to `CoordinateCleaner::cd_round`.
#'   Default is `NULL`, which uses standard parameters (`tdi = 1000`, `method = "distance"`, `min_occs = 4`).
#'
#' @return A cleaned data frame with problematic records removed based on the specified criteria.
#'
#' @details
#' - This function sequentially applies a series of cleaning functions from the `CoordinateCleaner` package.
#' - Each cleaning step can be enabled or disabled using its corresponding parameter.
#' - Outlier detection (`cc_outl`) uses customizable parameters via the `outlier_settings` argument.
#' - Records with `individualCount == 0` or `occurrenceStatus == "ABSENT"` are also removed.
#'
#' @examples
#' # Example: Clean a dataset of species observations
#' data(observations)
#' clean_data <- clean_coords(
#'   x = observations$data,
#'   species_column = "scientificName",
#'   remove_outliers = TRUE,
#'   remove_sea = FALSE
#' )
#'
#' # Example: Customize outlier detection settings
#' clean_data <- clean_coords(
#'   x = observations,
#'   outlier_settings = list(tdi = 500, method = "quantile")
#' )
#'
#' @import CoordinateCleaner
#' @export
clean_coords <- function(
x,
species_column = "scientificName",
remove_capitals = TRUE,
remove_centroids = TRUE,
remove_duplicates = TRUE,
remove_gbif = TRUE,
remove_institutions = TRUE,
remove_invalid = TRUE,
remove_hotspots = TRUE,
remove_outliers = TRUE,
remove_sea = TRUE,
remove_urban = TRUE,
remove_zero = TRUE,
outlier_settings = list(tdi = 1000, method = "distance"),
round_settings = NULL
) {
if (remove_capitals) {
x <- CoordinateCleaner::cc_cap(x, species = species_column)
}
if (remove_centroids) {
x <- CoordinateCleaner::cc_cen(x, species = species_column)
}
if (remove_duplicates) {
x <- CoordinateCleaner::cc_dupl(x, species = species_column)
}
if (remove_gbif) {
x <- CoordinateCleaner::cc_gbif(x, species = species_column)
}
if (remove_hotspots) {
x <- CoordinateCleaner::cc_aohi(x, species = species_column)
}
if (remove_institutions) {
x <- CoordinateCleaner::cc_inst(x, species = species_column)
}
if (remove_invalid) {
x <- CoordinateCleaner::cc_val(x)
}
# Remove outliers
outlier_args <- list(
x = x,
species = species_column,
tdi = 1000,
method = "distance",
min_occs = 4
)
if (!is.null(outlier_settings)) {
outlier_args <- utils::modifyList(outlier_args, outlier_settings)
}
if (remove_outliers) {
x <- do.call(CoordinateCleaner::cc_outl, outlier_args)
}
# Remove raster centroids
if (!is.null(round_settings)) {
x <- do.call(CoordinateCleaner::cd_round, round_settings)
}
if (remove_sea) {
x <- CoordinateCleaner::cc_sea(x, species = species_column)
}
if (remove_urban) {
x <- CoordinateCleaner::cc_urb(x)
}
if (remove_zero) {
x <- CoordinateCleaner::cc_zero(x)
}
# Remove absences
absences <- which(x$individualCount == 0 | x$occurrenceStatus == "ABSENT")
if (length(absences) >= 1) {
x <- x[-absences,]
}
return(x)
}
clean_data <- clean_coords(
x = observations,
species_column = "scientificName",
remove_outliers = TRUE,
remove_sea = FALSE
)
?cc_outl
devtools::install_github("https://github.com/ManuelPopp/GBIFhandleR")
##
## Date Created: 2024-12-07
##
## ---------------------------
##
## Descripton: Download species observations from GBIF
## Notes: -
##
#>----------------------------------------------------------------------------<|
#> Install/load packages
rm(list = ls())
import <- function(...) {
#' Import R packages. Install them if necessary.
#'
#' @param ... any argument that can be passed to install.packages.
#' @details The function installs only packages that are missing. Packages
#' are loaded.
#' @examples
#' # Load packages
#' import("dplyr", "MASS", "terra", dependencies = TRUE)
#'
#' @seealso \code{\link[base]{install.packages}}
#' @export
args <- list(...)
packages = args[names(args) == ""]
kwargs = args[names(args) != ""]
for (package in packages) {
if (!require(package, character.only = TRUE)) {
do.call(install.packages, c(list(package), kwargs))
}
require(package, character.only = TRUE)
}
}
import(
"dplyr", "devtools",
dependencies = TRUE
)
if (!require("GBIFhandleR", character.only = TRUE)) {
devtools::install_github("https://github.com/ManuelPopp/GBIFhandleR")
}
require("GBIFhandleR")
#>----------------------------------------------------------------------------<|
#> Settings
if (Sys.info()["sysname"] == "Windows") {
dir_main <- "C:/Users/poppman/switchdrive/PhD/prj/bir/git/BiomeInvasibility"
} else {
dir_main <- "/lud11/poppman/BiomeInvasibility"
}
dir_dat <- file.path(dir_main, "dat")
dir_obs <- file.path(dir_dat, "obs")
f_species <- "species_names.csv"
col_spnames <- "Accepted_SPNAME"
# Set up directory for output
dir.create(dir_obs, showWarnings = FALSE)
if (!file.exists(file.path(dir_main, ".gitignore.txt"))) {
sink(file.path(dir_main, ".gitignore.txt"))
print("dat/obs")
sink()
}
#>----------------------------------------------------------------------------<|
#> Functions
download <- function(species_name) {
dst <- file.path(dir_obs, paste0(species_name, ".csv"))
if (!file.exists(dst)) {
observations <- GBIFhandleR::get_observations(species_name)
write.csv(observations, file = dst, row.names = FALSE)
}
}
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::pull(col_spnames)
#>----------------------------------------------------------------------------<|
#> Functions
download <- function(species_name) {
dst <- file.path(dir_obs, paste0(species_name, ".csv"))
if (!file.exists(dst)) {
observations <- GBIFhandleR::get_observations(species_name)
write.csv(observations$data, file = dst, row.names = FALSE)
}
}
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::pull(col_spnames)
for (i in 1:length(species)) {
species_name <- species[i]
cat(
"Downloading species", i, "of", length(species),
paste0("(", species_name, ").")
)
download(species_name)
}
##
## Date Created: 2024-12-07
##
## ---------------------------
##
## Descripton: Download species observations from GBIF
## Notes: -
##
#>----------------------------------------------------------------------------<|
#> Install/load packages
rm(list = ls())
setwd("D:/onedrive/OneDrive - Eidg. Forschungsanstalt WSL/switchdrive/PhD/prj/bir/git/GBIFhandleR")
devtools::document()
devtools::test()
usethis::use_test()
devtools::build()
devtools::check()
data <- data.frame()
setdiff(c("onfig", "COLUMNS"), names(data))
missing <- setdiff(c("onfig", "COLUMNS"), names(data))
data[missing] <- NA
data <- data.frame()
data
data[missing] <- NA
for (column in missing) {
data[[column]] <- NA
}
data <- data.frame()
for (column in missing) {
data[[column]] <- NA
}
data <- data.frame(matrix(ncol = 0, nrow = 1))
for (column in missing) {
data[[column]] <- NA
}
data
missing <- c("hi", "test")
for (column in missing) {
data[[column]] <- NA
}
data
setwd("D:/onedrive/OneDrive - Eidg. Forschungsanstalt WSL/switchdrive/PhD/prj/bir/git/GBIFhandleR/R")
setwd("D:/onedrive/OneDrive - Eidg. Forschungsanstalt WSL/switchdrive/PhD/prj/bir/git/GBIFhandleR")
rm(list = ls())
devtools::document()
devtools::build()
devtools::install(upgrade = "never")
devtools::check()
