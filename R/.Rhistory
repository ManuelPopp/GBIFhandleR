axis.ticks.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 10),
legend.position = c(0.9, 0),
legend.justification = c(0.5, 0),
strip.background = ggplot2::element_rect(
fill = "lightgoldenrod2", color = "black"
),
strip.text = ggplot2::element_text(size = 9)
) +
ggplot2::labs(
x = element_blank(),
y = expression(
sum(Area[burned,i], i == 2001, 2010) / sum(Area[burned,i], i == 2011, 2020)
)
) +
ggplot2::scale_fill_manual(name = "Type of change", values = cols) +
ggplot2::guides(fill = ggplot2::guide_legend(direction = "horizontal"))
gg
# Wide
gg <- ggplot2::ggplot(
data = df, aes(x = type, y = fire_ratio, fill = type)
) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::facet_wrap(. ~ facet_lab, nrow = 8) +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 10),
legend.position = c(0.9, 0),
legend.justification = c(0.5, 0),
strip.background = ggplot2::element_rect(
fill = "lightgoldenrod2", color = "black"
),
strip.text = ggplot2::element_text(size = 9)
) +
ggplot2::labs(
x = element_blank(),
y = expression(
sum(Area[burned,i], i == 2001, 2010) / sum(Area[burned,i], i == 2011, 2020)
)
) +
ggplot2::scale_fill_manual(name = "Type of change", values = cols)
gg
# Wide
gg <- ggplot2::ggplot(
data = df, aes(x = type, y = fire_ratio, fill = type)
) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::facet_wrap(. ~ facet_lab, ncol = 8) +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 10),
legend.position = c(0.9, 0),
legend.justification = c(0.5, 0),
strip.background = ggplot2::element_rect(
fill = "lightgoldenrod2", color = "black"
),
strip.text = ggplot2::element_text(size = 9)
) +
ggplot2::labs(
x = element_blank(),
y = expression(
sum(Area[burned,i], i == 2001, 2010) / sum(Area[burned,i], i == 2011, 2020)
)
) +
ggplot2::scale_fill_manual(name = "Type of change", values = cols)
gg
# Wide
gg <- ggplot2::ggplot(
data = df, aes(x = type, y = fire_ratio, fill = type)
) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::facet_wrap(. ~ facet_lab, ncol = 8) +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 10),
legend.position = c(0.95, 0),
legend.justification = c(0.5, 0),
strip.background = ggplot2::element_rect(
fill = "lightgoldenrod2", color = "black"
),
strip.text = ggplot2::element_text(size = 9)
) +
ggplot2::labs(
x = element_blank(),
y = expression(
sum(Area[burned,i], i == 2001, 2010) / sum(Area[burned,i], i == 2011, 2020)
)
) +
ggplot2::scale_fill_manual(name = "Type of change", values = cols)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 15, height = 15
)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 20, height = 1
)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 20, height = 10
)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 20, height = 12
)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 22, height = 12
)
# Wide
gg <- ggplot2::ggplot(
data = df, aes(x = type, y = fire_ratio, fill = type)
) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::facet_wrap(. ~ facet_lab, ncol = 8) +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 10),
legend.position = c(0.95, 0),
legend.justification = c(0.5, 0),
strip.background = ggplot2::element_rect(
fill = "lightgoldenrod2", color = "black"
),
strip.text = ggplot2::element_text(size = 9)
) +
ggplot2::labs(
x = element_blank(),
y = expression(
sum(
Area[burned * ", " * i], i == 2001, 2010
) / sum(Area[burned * ", " * i], i == 2011, 2020)
)
) +
ggplot2::scale_fill_manual(name = "Type of change", values = cols)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 22, height = 12
)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 22, height = 12.25
)
# Wide
gg <- ggplot2::ggplot(
data = df, aes(x = type, y = fire_ratio, fill = type)
) +
ggplot2::geom_bar(stat = "identity") +
ggplot2::facet_wrap(. ~ facet_lab, ncol = 8) +
ggplot2::theme_bw() +
ggplot2::theme(
axis.text.x = ggplot2::element_blank(),
axis.ticks.x = ggplot2::element_blank(),
axis.text.y = ggplot2::element_text(size = 10),
legend.position = c(0.95, 0.05),
legend.justification = c(0.5, 0),
strip.background = ggplot2::element_rect(
fill = "lightgoldenrod2", color = "black"
),
strip.text = ggplot2::element_text(size = 9)
) +
ggplot2::labs(
x = element_blank(),
y = expression(
sum(
Area[burned * "," * i], i == 2001, 2010
) / sum(Area[burned * "," * i], i == 2011, 2020)
)
) +
ggplot2::scale_fill_manual(name = "Type of change", values = cols)
ggplot2::ggsave(
filename = file.path(
"C:/Users/poppman/switchdrive/PhD/prj/bff/fig",
"FireFrequencyChangeBoundaries.svg"
),
plot = gg, width = 22, height = 12.25
)
seq(2001, 2024, period_length)
seq(2001, 2024, 10)
seq(bin, bin + 10)
bin = 2002
seq(bin, bin + 10)
seq(bin, bin + 10 - 1)
seq(2012, 2012 + 10 - 1)
import <- function(...) {
#' Import R packages. Install them if necessary.
#'
#' @param ... any argument that can be passed to install.packages.
#' @details The function installs only packages that are missing. Packages
#' are loaded.
#' @examples
#' # Load packages
#' import("dplyr", "MASS", "terra", dependencies = TRUE)
#'
#' @seealso \code{\link[base]{install.packages}}
#' @export
args <- list(...)
packages = args[names(args) == ""]
kwargs = args[names(args) != ""]
for (package in packages) {
if (!require(package, character.only = TRUE)) {
do.call(install.packages, c(list(package), kwargs))
}
require(package, character.only = TRUE)
}
}
import(
"terra", "dplyr", "tidyterra", "progress",
dependencies = TRUE
)
#>----------------------------------------------------------------------------<|
#> Functions
load_multi <- function(files, dst = NULL, ...) {
#' Load and merge multiple raster files from disc.
#'
#' @param files A vector of raster file paths.
#' @param dst A character string providing an output file name. If NULL, the
#' result is computed and returned but will not be saved to disc.
#' @param ... Any additional parameters to terra::writeRaster
#' @return A terra::SpatRaster of the merged raster files.
#' @section Requirements:
#' This function requires the terra package.
#' @seealso \code{\link[terra]{writeRaster}}
#'
#' @export
if (!requireNamespace("terra", quietly = TRUE)) {
stop("Package 'terra' is required but not installed.")
}
rasters <- lapply(X = files, FUN = terra::rast)
combined <- do.call(terra::merge, rasters)
if (!is.null(dst)) {
terra::writeRaster(combined, dst, ...)
}
return(combined)
}
load_year <- function(year, files, ...) {
#' Load and merge all raster files from a specific year.
#'
#' This is a wrapper to the load_multi function which enables easy loading of
#' raster files from a specific year.
#'
#' @param year An integer indicating the year of interest.
#' @param files A data.frame with the columns "full_name" and "year".
#' @param ... Any additional parameters to load_multi.
#' @return A terra::SpatRaster of the merged raster files.
#' @note The column full_name must hold the full paths to the raster files.
#'
#' @export
file_dirs <- files$full_name[which(files$year == year)]
return(load_multi(file_dirs, ...))
}
#>----------------------------------------------------------------------------<|
#> Settings
if (Sys.info()["sysname"] == "Windows") {
dir_main <- "C:/Users/poppman/switchdrive/PhD/prj/bff"
dir_dat <- "L:/poppman/data/modis/monthly_burned_area"
} else {
dir_main <- "/lud11/poppman/data"
dir_dat <- "/lud11/poppman/data/modis/monthly_burned_area"
}
files <- data.frame(
file_name = list.files(dir_dat, pattern = ".tif$", full.names = FALSE),
full_name = list.files(dir_dat, pattern = ".tif$", full.names = TRUE)
)
files$year <- as.numeric(
sub(
"Summary_", "",
unlist(
regmatches(
files$file_name,
gregexpr("Summary_[0-9]{4}", files$file_name)
)
)
)
)
files
print(
files %>%
dplyr::group_by(year) %>%
dplyr::summarise(file_count = n()) %>%
dplyr::select(year, file_count),
n = 30
)
period_length <- 10
calculate_anew <- FALSE
# Summarise for time bins
# Add 1 to ensure the first year is fully covered
bins <- seq(min(files$year) + 1, max(files$year), period_length)
bins
bin <- bins[1]
years <- seq(bin, bin + period_length - 1)
years
paste0("Fire_freq", min(years), "-", max(years), ".tif")
bin <- bins[2]
years <- seq(bin, bin + period_length - 1)
years
paste0("Fire_freq", min(years), "-", max(years), ".tif")
setwd("D:/onedrive/OneDrive - Eidg. Forschungsanstalt WSL/switchdrive/PhD/prj/bff/rsc")
setwd("D:/onedrive/OneDrive - Eidg. Forschungsanstalt WSL/switchdrive/PhD/prj/bir/git/GBIFhandleR/R")
devtools::install_github("https://github.com/ManuelPopp/GBIFhandleR")
require("GBIFhandleR")
require("dplyr")
#>----------------------------------------------------------------------------<|
#> Settings
dir_main <- "C:/Users/poppman/switchdrive/PhD/prj/bir/git/BiomeInvasibility"
dir_dat <- file.path(dir_main, "dat")
f_species <- "species_names.csv"
col_spnames <- "Accepted_SPNAME"
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv2(file.path(dir_dat, f_species)) %>%
dplyr::select(col_spnames)
read.csv2(file.path(dir_dat, f_species))
read.csv(file.path(dir_dat, f_species))
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::select(col_spnames)
species
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::select(col_spnames) %>%
as.character()
species
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::select(col_spnames)
species
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::select(col_spnames) %>%
as.vector()
species
dir_obs <- file.path(dir_dat, "obs")
dir.create(dir_obs, showWarnings = FALSE)
if (!file.exists(file.path(dir_main, ".gitignore.txt"))) {
sink(file.path(dir_main, ".gitignore.txt"))
print("dat/obs")
sink()
}
# Set up directory for output
dir.create(dir_obs, showWarnings = FALSE)
i <- 5
species <- "Abies alba"
cat("Downloading species", i, "(", species, ").")
cat("Downloading species", i, paste0("(", species, ")."))
cat("Downloading species", i, "of", length(species), paste0("(", species, ")."))
Sys.info()
Sys.info()$sysname
Sys.info("sysname")
Sys.info()["sysname"]
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::select(dplyr::all_of(col_spnames)) %>%
as.vector()
species
for (i in 1:length(species)) {
species_name <- species[i]
cat(
"Downloading species", i, "of", length(species), paste0("(", species, ").")
)
download(species_name)
}
cat(
"Downloading species", i, "of", length(species),
paste0("(", species_name, ").")
)
for (i in 1:length(species)) {
species_name <- species[i]
cat(
"Downloading species", i, "of", length(species),
paste0("(", species_name, ").")
)
download(species_name)
}
species <- read.csv(file.path(dir_dat, f_species))
View(species)
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::pull(col_spnames)
species
for (i in 1:length(species)) {
species_name <- species[i]
cat(
"Downloading species", i, "of", length(species),
paste0("(", species_name, ").")
)
download(species_name)
}
#!/usr/bin/env Rscript
#>------------------------------------<
##
## Script name: Download species
## occurence data
##
## Author: Manuel R. Popp
## Email: manuel.popp@wsl.ch
##
## Date Created: 2024-12-07
##
## ---------------------------
##
## Descripton: Download species observations from GBIF
## Notes: -
##
#>----------------------------------------------------------------------------<|
#> Install/load packages
rm(list = ls())
import <- function(...) {
#' Import R packages. Install them if necessary.
#'
#' @param ... any argument that can be passed to install.packages.
#' @details The function installs only packages that are missing. Packages
#' are loaded.
#' @examples
#' # Load packages
#' import("dplyr", "MASS", "terra", dependencies = TRUE)
#'
#' @seealso \code{\link[base]{install.packages}}
#' @export
args <- list(...)
packages = args[names(args) == ""]
kwargs = args[names(args) != ""]
for (package in packages) {
if (!require(package, character.only = TRUE)) {
do.call(install.packages, c(list(package), kwargs))
}
require(package, character.only = TRUE)
}
}
import(
"dplyr", "devtools",
dependencies = TRUE
)
if (!require("GBIFhandleR", character.only = TRUE)) {
devtools::install_github("https://github.com/ManuelPopp/GBIFhandleR")
}
require("GBIFhandleR")
#>----------------------------------------------------------------------------<|
#> Settings
if (Sys.info()["sysname"] == "Windows") {
dir_main <- "C:/Users/poppman/switchdrive/PhD/prj/bir/git/BiomeInvasibility"
} else {
dir_main <- "/lud11/poppman/BiomeInvasibility"
}
dir_dat <- file.path(dir_main, "dat")
dir_obs <- file.path(dir_dat, "obs")
f_species <- "species_names.csv"
col_spnames <- "Accepted_SPNAME"
# Set up directory for output
dir.create(dir_obs, showWarnings = FALSE)
if (!file.exists(file.path(dir_main, ".gitignore.txt"))) {
sink(file.path(dir_main, ".gitignore.txt"))
print("dat/obs")
sink()
}
#>----------------------------------------------------------------------------<|
#> Functions
download <- function(species_name) {
dst <- file.path(dir_obs, paste0(species_name, ".csv"))
if (!file.exists(dst)) {
observations <- GBIFhandleR::get_observations(species_name)
write.csv2(dst)
}
}
#>----------------------------------------------------------------------------<|
#> Read species list
species <- read.csv(file.path(dir_dat, f_species)) %>%
dplyr::pull(col_spnames)
for (i in 1:length(species)) {
species_name <- species[i]
cat(
"Downloading species", i, "of", length(species),
paste0("(", species_name, ").")
)
download(species_name)
}
file.path(dir_obs, paste0(species_name, ".csv"))
?write.csv2
devtools::install_github("https://github.com/ManuelPopp/GBIFhandleR")
devtools::install_github("https://github.com/ManuelPopp/GBIFhandleR")
